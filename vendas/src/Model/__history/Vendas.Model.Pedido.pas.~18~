unit Vendas.Model.Pedido;

interface

uses
  System.Classes;

type
  TPedido = class

  private

    FDataPedido: TDateTime;
    FValorTotal: Currency;
    FCodigoCliente: Integer;
    FNumeroPedido: Integer;

    function SetCodigoCliente: Integer;
    function SetDataPedido: TDateTime;
    function SetNumeroPedido: Integer;
    function SetValorTotal: Currency;

  public

    constructor Create;

    destructor Destroy; override;

    property NumeroPedido: Integer read SetNumeroPedido write FNumeroPedido;
    property DataPedido: TDateTime read SetDataPedido write FDataPedido;
    property CodigoCliente: Integer read SetCodigoCliente write FCodigoCliente;
    property ValorTotal: Currency read SetValorTotal write FValorTotal;

    {
      property NumeroPedido: Integer read FNumeroPedido write SetNumeroPedido;
      property DataPedido: TDateTime read FDataPedido write SetDataPedido;
      property CodigoCliente: Integer read FCodigoCliente write SetCodigoCliente;
      property ValorTotal: Currency read FValorTotal write SetValorTotal;
    }

  end;

implementation

uses
  System.SysUtils;

{ TPedido }

constructor TPedido.Create;
begin

end;

destructor TPedido.Destroy;
begin

  inherited;
end;

function TPedido.SetCodigoCliente: Integer;
begin
  Result := FCodigoCliente;
end;

function TPedido.SetDataPedido: TDateTime;
begin
  Result := FDataPedido;
end;

function TPedido.SetNumeroPedido: Integer;
begin
 if FNumeroPedido = EmptyStr then
  begin
    raise Exception.Create('Digite o código do cliente!');
  end;
  Result := FNumeroPedido;
end;

function TPedido.SetValorTotal: Currency;
begin
  Result := FValorTotal;
end;

end.
